{"version":3,"file":"static/js/296.04d95c10.chunk.js","mappings":"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","sources":["components/Eye/Eye.styled.ts","components/Eye/Eye.tsx","components/Input/Input.styled.ts","components/Input/Input.tsx","components/Section/Section.styled.ts","components/Section/Section.tsx","components/LoginForm/LoginForm.tsx","pages/Login/Login.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const IconWrapper = styled.div`\n  margin: 0;\n  padding: 0;\n  border: none;\n  font-size: 0;\n  width: 0;\n  height: 0;\n  cursor: pointer;\n  background-color: transparent;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  color: ${p => p.theme.colors.secondaryColor};\n  outline: none;\n\n  svg {\n    position: absolute;\n    top: 29px;\n    right: 12px;\n    width: 20px;\n    height: 20px;\n    fill: ${p => p.theme.colors.mainText};\n  }\n\n  :hover svg,\n  :focus svg {\n    fill: ${p => p.theme.colors.accent};\n  }\n`;\n","import React from 'react';\nimport { FaEyeSlash, FaEye } from 'react-icons/fa';\nimport { IconWrapper } from './Eye.styled';\n\ninterface IProps {\n  onClick: React.MouseEventHandler<HTMLDivElement>;\n  isVisible: boolean;\n}\n\nexport const Eye: React.FC<IProps> = ({ onClick, isVisible }) => (\n  <IconWrapper onClick={onClick}>\n    {isVisible ? <FaEye /> : <FaEyeSlash />}\n  </IconWrapper>\n);\n","import styled from '@emotion/styled';\n\nexport const LabelStyled = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  text-align: start;\n  margin-bottom: ${p => p.theme.space[3]}px;\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeight.semiBold};\n  text-transform: capitalize;\n  color: ${p => p.theme.colors.mainText};\n\n  :last-of-type {\n    margin-bottom: ${p => p.theme.space[4]}px;\n  }\n\n  :focus-within {\n    color: ${p => p.theme.colors.accent};\n  }\n`;\n\ntype inputProps = {\n  backgroundColor: 'bgErrorColor' | '';\n  border: string;\n};\n\nexport const InputStyled = styled.input<inputProps>`\n  margin-top: ${p => p.theme.space[1]}px;\n  padding-top: ${p => p.theme.space[2]}px;\n  padding-left: ${p => p.theme.space[4]}px;\n  padding-right: ${p => p.theme.space[4]}px;\n  padding-bottom: ${p => p.theme.space[2]}px;\n  outline: transparent;\n  background-color: ${p =>\n    p.theme.colors[p.backgroundColor] || p.theme.colors.white};\n  border: ${p => p.theme.borders.normal} ${p => p.theme.colors[p.border]};\n  border-radius: ${p => p.theme.space[1]}px;\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus {\n    border-color: ${p => p.theme.colors.secondaryColor};\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: ${p => p.theme.colors.red};\n  font-size: ${p => p.theme.fontSizes.xs};\n  text-transform: lowercase;\n`;\n\nexport const InputIcon = styled.div`\n  position: absolute;\n  top: 31px;\n  left: 8px;\n`;\n","import { Eye } from 'components/Eye/Eye';\nimport { INPUT_TYPES } from 'constants/constants';\nimport { useState } from 'react';\nimport {\n  Ref,\n  MultipleFieldErrors,\n  Message,\n  UseFormRegister,\n} from 'react-hook-form'; // Forms\nimport { LabelStyled, ErrorText, InputStyled, InputIcon } from './Input.styled';\nimport { FaUserEdit, FaPencilAlt } from 'react-icons/fa';\nimport { MdEmail, MdLock, MdOutlinePhoneAndroid } from 'react-icons/md';\n\nexport type FieldError = {\n  type: string;\n  ref?: Ref;\n  types?: MultipleFieldErrors;\n  message?: Message;\n};\n\ninterface IProps {\n  type?: string;\n  name: 'number' | 'name' | 'password' | 'email';\n  placeholder?: string;\n  register: UseFormRegister<any>;\n  error: FieldError | undefined;\n}\n\nexport const Input: React.FC<IProps> = ({\n  type = INPUT_TYPES.text,\n  name,\n  placeholder,\n  register,\n  error,\n}) => {\n  const [inputType, setInputType] = useState<string>(type);\n\n  const toggleInputType: React.MouseEventHandler<HTMLDivElement> = event => {\n    inputType === INPUT_TYPES.password\n      ? setInputType(INPUT_TYPES.text)\n      : setInputType(INPUT_TYPES.password);\n  };\n\n  return (\n    <LabelStyled>\n      {name}\n      <InputIcon> {getIcon(type)}</InputIcon>\n      <InputStyled\n        type={inputType}\n        placeholder={placeholder}\n        {...register(name, { required: true })}\n        aria-invalid={error ? 'true' : 'false'}\n        border={error ? 'red' : 'btnColor'}\n        backgroundColor={error ? 'bgErrorColor' : ''}\n      />\n      {error && <ErrorText>{error?.message}</ErrorText>}\n      {type === INPUT_TYPES.password && (\n        <Eye\n          onClick={toggleInputType}\n          isVisible={inputType !== INPUT_TYPES.password}\n        />\n      )}\n    </LabelStyled>\n  );\n};\n\nfunction getIcon(type: string) {\n  switch (type) {\n    case INPUT_TYPES.text:\n      return <FaUserEdit />;\n    case INPUT_TYPES.password:\n      return <MdLock />;\n    case INPUT_TYPES.email:\n      return <MdEmail />;\n    case INPUT_TYPES.tel:\n      return <MdOutlinePhoneAndroid />;\n    default:\n      return <FaPencilAlt />;\n  }\n}\n","import styled from '@emotion/styled';\nimport { mq } from 'constants/mediaConstants';\n\nexport const Title = styled.h2`\n  display: block;\n  margin-bottom: ${p => p.theme.space[3]}px;\n  font-weight: ${p => p.theme.fontWeight.bold};\n  font-size: ${p => p.theme.fontSizes.s};\n  line-height: 1.18;\n  letter-spacing: 0.05em;\n  color: ${p => p.theme.colors.accentTextColor};\n\n  ${mq.medium} {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n\n  ${mq.large} {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n","import { Box } from 'components/Box/Box';\nimport { containerWidth } from 'constants/mediaConstants';\nimport { theme } from 'constants/theme';\nimport { Title } from './Section.styled';\n\ninterface IProps {\n  title?: string;\n  children?: React.ReactNode;\n}\n\nexport const Section: React.FC<IProps> = ({ title, children }) => (\n  <Box as=\"section\" py={[3, 3, 4, 4]} px={[2, 2, 4, 6]}>\n    <Box\n      pt={[3, 3, 3, 4]}\n      pb={[4, 4, 4, 4]}\n      px={[3, 3, 4, 4]}\n      bg=\"white\"\n      maxWidth={containerWidth}\n      mx=\"auto\"\n      boxShadow={theme.boxShadow.second}\n      borderRadius={theme.radii.normal}\n      textAlign=\"center\"\n    >\n      {title && <Title>{title}</Title>}\n      {children}\n    </Box>\n  </Box>\n);\n","import { useForm, SubmitHandler } from 'react-hook-form'; // Forms\nimport { yupResolver } from '@hookform/resolvers/yup'; // for React-hook-form work with Yup\nimport * as yup from 'yup'; // Form validation\nimport { Button } from 'components/Button/Button';\nimport { Box } from 'components/Box/Box';\nimport { Input } from 'components/Input/Input';\nimport { ISignInUser } from 'types/user';\nimport { INPUT_TYPES } from 'constants/constants';\nimport { userLogin } from 'redux/auth/authOperations';\nimport { useAppDispatch } from 'redux/hooks';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n};\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required('Email is required'),\n  password: yup.string().required('Password is required'),\n});\n\nexport const LoginForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<ISignInUser>({\n    defaultValues: { ...INITIAL_STATE },\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit: SubmitHandler<ISignInUser> = data => {\n    dispatch(userLogin(data));\n    reset();\n  };\n\n  return (\n    <Box as=\"form\" textAlign=\"center\" onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        type={INPUT_TYPES.email}\n        name=\"email\"\n        placeholder=\"E-mail\"\n        register={register}\n        error={errors.email}\n      />\n      <Input\n        type={INPUT_TYPES.password}\n        name=\"password\"\n        placeholder=\"Password\"\n        register={register}\n        error={errors.password}\n      />\n\n      <Button type=\"submit\" name=\"primary\">\n        Login\n      </Button>\n    </Box>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Section } from 'components/Section/Section';\n\nconst Login = () => {\n  return (\n    <Section title=\"Login\">\n      <LoginForm />\n    </Section>\n  );\n};\nexport default Login;\n"],"names":["IconWrapper","styled","p","theme","colors","secondaryColor","mainText","accent","Eye","onClick","isVisible","LabelStyled","space","fontSizes","s","fontWeight","semiBold","InputStyled","backgroundColor","white","borders","normal","border","ErrorText","red","xs","InputIcon","Input","type","INPUT_TYPES","name","placeholder","register","error","useState","inputType","setInputType","getIcon","required","message","event","Title","bold","accentTextColor","mq","m","l","Section","title","children","Box","as","py","px","pt","pb","bg","maxWidth","containerWidth","mx","boxShadow","borderRadius","textAlign","INITIAL_STATE","email","password","validationSchema","yup","shape","LoginForm","dispatch","useAppDispatch","useForm","defaultValues","resolver","yupResolver","handleSubmit","reset","errors","formState","onSubmit","data","userLogin","I","Button"],"sourceRoot":""}