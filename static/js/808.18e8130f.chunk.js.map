{"version":3,"file":"static/js/808.18e8130f.chunk.js","mappings":"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","sources":["components/NewContactForm/NewContactForm.styled.ts","components/UpdateContactModal/UpdateContactModal.styled.ts","components/UpdateContactModal/UpdateContactModal.tsx","components/NewContactForm/NewContactForm.tsx","pages/NewContact/NewContact.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-top: ${p => p.theme.space[3]}px;\n`;\n","import styled from '@emotion/styled';\nimport { mq } from 'constants/mediaConstants';\n\nexport const Container = styled.div`\n  min-width: 200px;\n  min-height: 160px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  p {\n    font-weight: ${p => p.theme.fontWeight.bold};\n    font-size: ${p => p.theme.fontSizes.s};\n    line-height: 1.18;\n    letter-spacing: 0.05em;\n    color: ${p => p.theme.colors.accentTextColor};\n    text-align: center;\n\n    :last-of-type {\n      margin-bottom: ${p => p.theme.space[3]}px;\n\n      ${mq.medium} {\n        margin-bottom: ${p => p.theme.space[4]}px;\n      }\n    }\n\n    ${mq.medium} {\n      font-size: ${p => p.theme.fontSizes.m};\n    }\n\n    ${mq.large} {\n      font-size: ${p => p.theme.fontSizes.l};\n    }\n  }\n`;\n","import { useNavigate } from 'react-router-dom/dist';\nimport { Box } from 'components/Box/Box';\nimport { Button } from 'components/Button/Button';\nimport { Container } from './UpdateContactModal.styled';\nimport { IContact } from 'types/contacts';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { useAppDispatch } from 'redux/hooks';\n\ninterface IProps {\n  contactToUpdate: IContact;\n  closeModal: () => void;\n}\n\nexport const UpdateContactModal: React.FC<IProps> = ({\n  contactToUpdate,\n  closeModal,\n}) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  function onUpdateContact() {\n    dispatch(updateContact(contactToUpdate));\n    closeModal();\n    navigate('/contacts');\n  }\n\n  return (\n    <Container>\n      <p>User {contactToUpdate.name.toUpperCase()} is already in Contacts.</p>\n      <p>Do you want to update it?</p>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        gridGap=\"16px\"\n      >\n        <Button onClick={onUpdateContact} name=\"primary\">\n          Update\n        </Button>\n        <Button name=\"primary\" onClick={closeModal}>\n          Cancel\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n","import { useForm, SubmitHandler } from 'react-hook-form'; // Forms\nimport { useSelector } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup'; // for React-hook-form work with Yup\nimport * as yup from 'yup'; // Form validation\nimport { toast } from 'react-toastify'; // Notifications\nimport { Button } from 'components/Button/Button';\nimport { Input } from 'components/Input/Input';\nimport { INPUT_TYPES } from 'constants/constants';\nimport { Loader } from 'components/Loader/Loader';\nimport { contactsSelectors } from 'redux/contacts/contactsSelectors';\nimport { useAppDispatch } from 'redux/hooks';\nimport { IContact } from 'types/contacts';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { Form } from './NewContactForm.styled';\nimport { Box } from 'components/Box/Box';\nimport { LinkStyled } from 'components/Navigation/NavLink/NavLink.styled';\nimport { Modal } from 'components/Modal/Modal';\nimport { UpdateContactModal } from 'components/UpdateContactModal/UpdateContactModal';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(4, 'Name should be at least 4 characters')\n    .max(20, 'Name should be at most 20 characters')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Number is required'),\n});\n\nexport const NewContactForm: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const isLoading = useSelector(contactsSelectors.selectLoading);\n\n  const [modalIsOpen, setModalIsOpen] = useState<boolean>(false);\n  const [duplicatedContact, setDuplicatedContact] = useState<IContact | null>(\n    null\n  );\n  const toggleModal = () => setModalIsOpen(prevModalState => !prevModalState);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<Omit<IContact, 'id'>>({\n    defaultValues: { ...INITIAL_STATE },\n    resolver: yupResolver(validationSchema),\n  });\n\n  const isInPhoneBook = (name: string, contacts: IContact[] = []) => {\n    const normalizedName = name.toLowerCase();\n    return contacts.find(({ name }) => name.toLowerCase() === normalizedName);\n  };\n\n  const onSubmit: SubmitHandler<Omit<IContact, 'id'>> = data => {\n    const { name } = data;\n    const contactIsInPhoneBook = isInPhoneBook(name, contacts);\n\n    if (contacts && contactIsInPhoneBook) {\n      toast.warn(`${name?.toUpperCase()} is already in CONTACTS`);\n      const { id } = contactIsInPhoneBook;\n\n      setDuplicatedContact({ ...data, id });\n      toggleModal();\n      return;\n    }\n\n    dispatch(addContact(data));\n    navigate('/contacts');\n    reset();\n  };\n\n  return (\n    /* \"handleSubmit\" will validate inputs before invoking \"onSubmit\" */\n    <>\n      {/* \"handleSubmit\" will validate inputs before invoking \"onSubmit\"  */}\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Input\n          name=\"name\"\n          placeholder=\"Name\"\n          register={register}\n          error={errors.name}\n        />\n        <Input\n          type={INPUT_TYPES.tel}\n          name=\"number\"\n          placeholder=\"Phone number\"\n          register={register}\n          error={errors.number}\n        />\n        <Loader isLoading={isLoading} />\n        <Box\n          display={['flex']}\n          justifyContent={'space-between'}\n          maxWidth=\"280px\"\n          mx=\"auto\"\n        >\n          <Button type=\"submit\" name=\"primary\" disabled={modalIsOpen}>\n            Add Contact\n          </Button>\n          <LinkStyled to=\"/contacts\">To Contacts</LinkStyled>\n        </Box>\n      </Form>\n      {modalIsOpen && (\n        <Modal closeModal={toggleModal}>\n          {duplicatedContact && (\n            <UpdateContactModal\n              contactToUpdate={duplicatedContact}\n              closeModal={toggleModal}\n            />\n          )}\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { NewContactForm } from 'components/NewContactForm/NewContactForm';\nimport { Section } from 'components/Section/Section';\n\nconst NewContact = () => {\n  return (\n    <Section title=\"Create new contact\">\n      <NewContactForm />\n    </Section>\n  );\n};\n\nexport default NewContact;\n"],"names":["Form","styled","p","theme","space","Container","fontWeight","bold","fontSizes","s","colors","accentTextColor","mq","m","l","UpdateContactModal","contactToUpdate","closeModal","dispatch","useAppDispatch","navigate","useNavigate","name","toUpperCase","Box","display","justifyContent","alignItems","gridGap","Button","onClick","updateContact","INITIAL_STATE","number","validationSchema","yup","shape","min","max","matches","required","NewContactForm","contacts","useSelector","contactsSelectors","isLoading","useState","modalIsOpen","setModalIsOpen","duplicatedContact","setDuplicatedContact","toggleModal","prevModalState","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","reset","errors","formState","onSubmit","data","contactIsInPhoneBook","normalizedName","toLowerCase","find","isInPhoneBook","toast","id","addContact","Input","I","placeholder","error","type","INPUT_TYPES","Loader","maxWidth","mx","disabled","to","Modal","Section","title"],"sourceRoot":""}